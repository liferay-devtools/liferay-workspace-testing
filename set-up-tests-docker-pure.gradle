import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.liferay.gradle.util.GradleUtil
import com.liferay.workspace.testing.ServerUtil
import com.liferay.workspace.testing.WaitForFileExistsAction

String dockerRoutesDir = "/opt/liferay/routes"
String localRoutesDir = "${gradle.liferayWorkspace.homeDir}/routes"
String microserviceRoutesDir = "/etc/liferay/routes"

createDockerContainer {
    hostConfig.binds.put localRoutesDir, dockerRoutesDir
    hostConfig.network.set "host"
}

startDockerContainer {
    doLast {
        println "Waiting for server to be reachable"
        GradleUtil.waitFor(
                {ServerUtil.isReachable("http://localhost:8080")},
                5 * 1000, 5 * 60 * 1000
        )
        println "reachable"
    }
}

[
    ":client-extensions:liferay-sample-etc-node",
    ":client-extensions:liferay-sample-etc-spring-boot"
].each {
    String projectPath ->

    project(projectPath).afterEvaluate {
        Project project ->
        TaskProvider<DockerCreateContainer> dockerCreateContainerTaskProvider = project.tasks.register("createDockerContainer", DockerCreateContainer) {
            dependsOn "buildDockerImage"

            containerId.set "${project.name}-container-id"
            containerName.set "${project.name}-docker-container-name"

            hostConfig.binds.put localRoutesDir, microserviceRoutesDir
            hostConfig.network.set "host"

            withEnvVar("LIFERAY_ROUTES_CLIENT_EXTENSION", "${microserviceRoutesDir}/default/${project.name}")
            withEnvVar("LIFERAY_ROUTES_DXP", "${microserviceRoutesDir}/default/dxp")

            imageId.set "${project.name}:latest"
        }

        project.tasks.register("startDockerContainer", DockerStartContainer) {
            dependsOn "createDockerContainer"
            dependsOn ":startDockerContainer"

            doFirst new WaitForFileExistsAction(provider {"${gradle.liferayWorkspace.homeDir}/routes/default/${project.name}"})

            containerId.set dockerCreateContainerTaskProvider.flatMap {it.containerId}

            onlyIf {
                !ServerUtil.isReachable("http://localhost:3001")
            }
        }

        project.tasks.register("stopDockerContainer", DockerStopContainer) {
            containerId.set dockerCreateContainerTaskProvider.flatMap {it.containerId}
        }
    }
}

tasks.named("setUpDependencies") {
    dependsOn ":client-extensions:liferay-sample-etc-node:startDockerContainer"
    dependsOn ":client-extensions:liferay-sample-etc-spring-boot:startDockerContainer"
}

tasks.named("tearDownDependencies") {
    dependsOn ":client-extensions:liferay-sample-etc-node:stopDockerContainer"
    dependsOn ":client-extensions:liferay-sample-etc-spring-boot:stopDockerContainer"
    dependsOn ":stopDockerContainer"
}