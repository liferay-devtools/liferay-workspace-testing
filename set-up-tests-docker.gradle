import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerExistingContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.github.dockerjava.api.DockerClient
import com.github.dockerjava.api.command.InspectContainerCmd
import com.github.dockerjava.api.command.InspectContainerResponse
import com.liferay.gradle.util.GradleUtil

import java.time.Duration

String dockerRoutesDir = "/opt/liferay/routes"
String microserviceRoutesDir = "/etc/liferay/routes"

Duration interval = Duration.ofSeconds(5)
Duration timeout = Duration.ofMinutes(5)

class WaitForHealthyAction implements Action<DockerExistingContainer> {
    private final Duration _interval
    private final Duration _timeout

    WaitForHealthyAction(Duration interval, Duration timeout) {
        _interval = interval
        _timeout = timeout
    }

    @Override
    void execute(DockerExistingContainer dockerExistingContainer) {
        DockerClient dockerClient = dockerExistingContainer.dockerClient

        println("Task ${dockerExistingContainer.path} waiting for healthy...")

        if (!GradleUtil.waitFor(
                {
                    InspectContainerCmd inspectContainerCmd = dockerClient.inspectContainerCmd(dockerExistingContainer.containerId.get())

                    InspectContainerResponse inspectContainerResponse = inspectContainerCmd.exec()

                    String status = inspectContainerResponse.state.health.status

                    println status

                    status == "healthy"
                },
                _interval.toMillis(),
                _timeout.toMillis()
        )) {
            throw new GradleException("Did not find healthy state in time!")
        }
        println("Task ${dockerExistingContainer.path} is healthy!")
    }
}
createDockerContainer {
    healthCheck.cmd "curl localhost:8080 && ls /opt/liferay/routes/default/liferay-sample-etc-node && ls /opt/liferay/routes/default/liferay-sample-etc-spring-boot"
    healthCheck.interval.set Duration.ofSeconds(5).toNanos()
    healthCheck.startPeriod.set Duration.ofMinutes(2).toNanos()
    healthCheck.timeout.set Duration.ofMinutes(5).toNanos()

    hostConfig.binds.put "routes", dockerRoutesDir
    hostConfig.network.set "host"

    volumes.add "routes"
}
startDockerContainer {
    doLast new WaitForHealthyAction(interval, timeout)
}

[":client-extensions:liferay-sample-etc-node", ":client-extensions:liferay-sample-etc-spring-boot"].each {
    String projectPath ->

    project(projectPath).afterEvaluate {
        Project project ->

        TaskProvider<DockerCreateContainer> dockerCreateContainerTaskProvider = project.tasks.register("createDockerContainer", DockerCreateContainer) {
            dependsOn "buildDockerImage"

            containerId.set "${project.name}-container-id"
            containerName.set "${project.name}-docker-container-name"

            hostConfig.binds.put "routes", microserviceRoutesDir
            hostConfig.network.set "host"

            volumes.add "routes"

            withEnvVar("LIFERAY_ROUTES_CLIENT_EXTENSION", "${microserviceRoutesDir}/default/${project.name}")
            withEnvVar("LIFERAY_ROUTES_DXP", "${microserviceRoutesDir}/default/dxp")

            imageId.set "${project.name}:latest"
        }

        project.tasks.register("startDockerContainer", DockerStartContainer) {
            dependsOn "createDockerContainer"
            dependsOn ":startDockerContainer"

            containerId.set dockerCreateContainerTaskProvider.flatMap {it.containerId}

            doLast new WaitForHealthyAction(interval, timeout)
        }

        project.tasks.register("stopDockerContainer", DockerStopContainer) {
            containerId.set dockerCreateContainerTaskProvider.flatMap {it.containerId}
        }
    }
}

project(":client-extensions:liferay-sample-etc-node").afterEvaluate {
    Project project ->

    project.tasks.named("createDockerContainer", DockerCreateContainer) {
        healthCheck.cmd "curl localhost:3001"
    }
}
project(":client-extensions:liferay-sample-etc-spring-boot").afterEvaluate {
    Project project ->

    project.tasks.named("createDockerContainer", DockerCreateContainer) {
        healthCheck.cmd "curl localhost:58081"
    }
}

tasks.named("setUpDependencies") {
    dependsOn ":client-extensions:liferay-sample-etc-spring-boot:startDockerContainer"
    dependsOn ":client-extensions:liferay-sample-etc-node:startDockerContainer"
}

tasks.named("tearDownDependencies") {
    dependsOn ":client-extensions:liferay-sample-etc-node:stopDockerContainer"
    dependsOn ":client-extensions:liferay-sample-etc-spring-boot:stopDockerContainer"
    dependsOn ":stopDockerContainer"
}